""" domains either learned or constructed from other domains """

from typing import Callable
import numpy as np

from agents.neural_networks import ReplayBuffer
from agents.neural_networks.neural_pomdps import DynamicsModel
from environments import ActionSpace
from environments import Simulator, SimulationResult
from misc import Space, DiscreteSpace, POBNRLogger


def train_from_random_policy(
        model: DynamicsModel,
        sim: Simulator,
        num_epochs: int,
        batch_size: int) -> None:
    """ trains a model with data obtained from the random policy

    Generates a replay buffer and performs updates by sampling from the replay
    buffer

    Args:
         model: (`pobnrl.agents.neural_networks.neural_pomdps.DynamicsModel`):
         sim: (`pobnrl.environments.Simulator`):
         num_epochs: (`int`): number of batch updates
         batch_size: (`int`): size of a batch update

    RETURNS (`None`):

    """

    replay_buffer = _replay_buffer_from_random_policy(sim)

    for _ in range(num_epochs):

        batch = replay_buffer.sample(batch_size=batch_size)

        states = np.array([seq[0][0] for seq in batch])
        actions = np.array([seq[0][1] for seq in batch])
        new_states = np.array([seq[0][2] for seq in batch])
        observations = np.array([seq[0][3] for seq in batch])

        model.batch_update(states, actions, new_states, observations)


def train_from_uniform_steps(
        model: DynamicsModel,
        sim: Simulator,
        num_epochs: int,
        batch_size: int) -> None:
    """ trains a model with data uniformly sampled from (S,A) space

    Performs `num_epochs` updates of size `batch_size` by sampling state-action
    pairs uniformly from the environment (the next state and observations are
    generated by the simulator)


    Args:
         model: (`pobnrl.agents.neural_networks.neural_pomdps.DynamicsModel`):
         sim: (`pobnrl.environments.Simulator`):
         num_epochs: (`int`): number of batch updates
         batch_size: (`int`): size of a batch update

    RETURNS (`None`):

    """

    for _ in range(num_epochs):

        states = np.array([sim.state_space.sample() for _ in range(batch_size)])
        actions = np.array([sim.action_space.sample() for _ in range(batch_size)])

        transitions = [sim.simulation_step(state, action) for state, action in zip(states, actions)]

        new_states = np.array([transition.state for transition in transitions])
        observations = np.array([transition.observation for transition in transitions])

        model.batch_update(states, actions, new_states, observations)


class NeuralEnsemblePOMDP(Simulator, POBNRLogger):
    """ A simulator over (`pobnrl.agents.neural_networks.neural_pomdps.DynamicsModel`, state) states """

    class AugmentedState:
        """ A state containing (POMDP state, POMDP dynamics) """

        def __init__(self, domain_state: np.ndarray, model: DynamicsModel):

            self.domain_state = domain_state
            self.model = model

        def __repr__(self) -> str:
            return f'Augmented state: state {self.domain_state} with model {self.model}'

    def __init__(self, domain: Simulator, conf):
        """ Creates `NeuralEnsemblePOMDP`

        Args:
             domain: (`pobnrl.environments.Simulator`): domain to train interactions from
             conf: configurations from program input (`network_size` and `learning_rate`)

        """

        POBNRLogger.__init__(self)

        # domain knowledge
        self.domain_action_space = domain.action_space
        self.domain_obs_space = domain.observation_space

        assert isinstance(self.domain_obs_space, DiscreteSpace),\
            f"current limited to learning discrete POMDPs, not {domain}"
        assert isinstance(domain.state_space, DiscreteSpace),\
            f"current limited to learning discrete POMDPs, not {domain}"

        self.sample_domain_start_state = domain.sample_start_state
        self.domain_obs2index = domain.obs2index

        self.domain_reward = domain.reward
        self.domain_terminal = domain.terminal

        self._models = [
            DynamicsModel(
                domain.state_space,
                domain.action_space,
                self.domain_obs_space,
                conf
            ) for i in range(conf.num_nets)
        ]

    @property
    def state_space(self) -> Space:
        """ No method should want to know `this` state space, raises error """
        raise NotImplementedError

    def __len__(self):
        return len(self._models)

    @property
    def action_space(self) -> ActionSpace:
        """ returns `this` actions space

        Args:

        RETURNS (`pobnrl.environments.ActionSpace`):

        """
        return self.domain_action_space

    @property
    def observation_space(self) -> DiscreteSpace:
        """ returns `this` observation space

        Args:

        RETURNS (`pobnrl.misc.Space`):

        """
        assert isinstance(self.domain_obs_space, DiscreteSpace),\
            f"current limited to learning discrete POMDPs, not {self.domain_obs_space}"
        return self.domain_obs_space

    def sample_start_state(self) -> 'AugmentedState':
        """  returns a sample initial (internal) state and some neural network

        Args:

        RETURNS (`AugmentedState`):

        """
        return self.AugmentedState(
            self.sample_domain_start_state(),
            np.random.choice(self._models)
        )

    def simulation_step(
            self,
            state: AugmentedState,
            action: int) -> SimulationResult:
        """ Performs simulation step

        Args:
             state: (`AugmentedState`): incoming state
             action: (`int`): action

        RETURNS (`pobnrl.environments.SimulationResult`):

        """

        # use model to generate a step
        new_domain_state, obs = state.model.simulation_step(state.domain_state, action)

        return SimulationResult(self.AugmentedState(new_domain_state, state.model), obs)

    def reward(self, state: AugmentedState, action: int, new_state: AugmentedState) -> float:
        """ the reward function of the underlying environment

        Args:
             state: (`AugmentedState`):
             action: (`int`):
             new_state: (`AugmentedState`):

        RETURNS (`float`): the reward of the transition

        """
        return self.domain_reward(state.domain_state, action, new_state.domain_state)

    def terminal(self, state: AugmentedState, action: int, new_state: AugmentedState) -> bool:
        """ the termination function of the underlying environment

        Args:
             state: (`AugmentedState`):
             action: (`int`):
             new_state: (`AugmentedState`):

        RETURNS (`bool`): whether the transition is terminal

        """
        return self.domain_terminal(state.domain_state, action, new_state.domain_state)

    def obs2index(self, observation: np.ndarray) -> int:
        """ projects observation to single dimension (scalar)

        Args:
             observation: (`np.ndarray`):

        RETURNS (`int`):

        """
        return self.domain_obs2index(observation)

    def train_models(self, train_net_f: Callable[[DynamicsModel], None]) -> None:
        """ train the ensemble with `train_net_f`

        Args:
             train_net_f: (`Callable[[` `pobnrl.agents.neural_networks.neural_pomdps.DynamicsModel` `], None]`): the method used to train each model

        RETURNS (`None`):

        """

        for i, model in enumerate(self._models):

            self.log(
                POBNRLogger.LogLevel.V1,
                f'Training Dynamics Neural Ensemble member {i+1}/{len(self._models)}'
            )

            train_net_f(model)


def _replay_buffer_from_random_policy(domain: Simulator) -> ReplayBuffer:
    """ Fills up a replay buffer of (s,a,s',o) interactions

    Args:
         domain: (`pobnrl.environments.Simulator`): a simulator to generate interactions

    RETURNS (`pobnrl.agents.neural_networks.misc.ReplayBuffer`):

    """

    replay_buffer = ReplayBuffer()

    for _ in range(replay_buffer.capacity):

        terminal = False
        state = domain.sample_start_state()
        while not terminal:

            action = domain.action_space.sample()

            step = domain.simulation_step(state, action)
            terminal = domain.terminal(state, action, step.state)

            replay_buffer.store(
                (state.copy(), action, step.state.copy(), step.observation),
                terminal
            )

            state = step.state

    assert replay_buffer.size == replay_buffer.capacity, \
        'learning should have filled up replay_buffer, ' \
        f' instead filled {replay_buffer.size} / replay_buffer.capacity..'

    return replay_buffer
